name: Build and Deploy Flutter IPA

on:
  push:
    branches:
      - main
      - dev

jobs:
  # generate-envfile:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Make envfile
  #       uses: SpicyPizza/create-envfile@v1.3
  #       with:
  #         envkey_API_URL: ${{ secrets.API_URL }}
  #         envkey_APP_NAME: edgar.care
  #         directory: .
  #         file_name: .env
  #         fail_on_empty: false

  #     - name: Export envfile to artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: envfile
  #         path: .env

  build:
    runs-on: macos-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: TODO
        run: echo "TODO"
  #     - name: Checkout
  #       uses: actions/checkout@v1

  #     - name: Setup Java Environment
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: corretto

  #     - name: Extract Branch Name
  #       run: echo branch=${GITHUB_REF#refs/heads/} >> $GITHUB_OUTPUT
  #       id: extract_branch

  #     - name: Download envfile
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: envfile

  #     - name: Setup Flutter Environment
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'stable'

  #     - name: Install the Apple certificate and provisioning profile
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         P12_PASSWORD: "" # ${{ secrets.P12_PASSWORD }}
  #         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #         # import certificate and provisioning profile from secrets
  #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #         echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH

  #         # apply provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

  #     - name: Build Ipa
  #       run: flutter build ipa

  #     - name: List
  #       run: ls -R

  #     - name: Upload Ipa to artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ipa-${{ steps.extract_branch.outputs.branch }}
  #         path: build/ios/ipa/app-release.ipa


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Download Ipa
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: ipa-${{ needs.build.outputs.branch }}

  #     - name: Rename Production Ipa
  #       if: ${{ needs.build.outputs.branch == 'main' }}
  #       run: mv ./app-release.ipa ./edgar.care.ipa

  #     - name: Rename Dev Ipa
  #       if: ${{ needs.build.outputs.branch  != 'main' }}
  #       run: mv ./app-release.ipa ./dev-edgar.care.ipa

  #     - name: Setup AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: ${{ secrets.AWS_REGION }}
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - name: Export Apk to S3
  #       run: aws s3 cp *.ipa s3://${{ secrets.BUCKET_NAME }} --acl public-read
